### ===================================================
### TWITTER API - UÇTAN UCA TEST SENARYOSU
### ===================================================
# Bu dosya, projenin tüm endpoint'lerini test etmek için kullanılır.
# Testlere başlamadan önce, veritabanının boş olduğundan
# (TRUNCATE komutu ile) ve backend sunucusunun çalıştığından emin ol.
# İstekleri yukarıdan aşağıya doğru sırayla çalıştır.

### --- Değişken Tanımlamaları ---
@baseUrl = http://localhost:3000
@elif_token =
@ece_token =


### ===================================================
### ADIM 0: Test Ortamını Hazırlama
### ===================================================
# Senaryomuz için iki kullanıcı oluşturup, her biri için ayrı ayrı
# giriş yaparak token'larını (giriş anahtarlarını) alıyoruz.

### Kullanıcı 1: "elif"i Kaydet
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "username": "elif",
  "password": "password123",
  "email": "elif@test.com"
}

### Kullanıcı 2: "ece"yi Kaydet
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "username": "ece",
  "password": "password456",
  "email": "ece@test.com"
}

### "elif" Olarak Giriş Yap ve Token'ı Sakla
# Bu isteğin cevabından gelen token, @elif_token değişkenine atanacak.
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "username": "elif",
  "password": "password123"
}
> {%
    client.global.set("elif_token", response.body.token);
%}

### "ece" Olarak Giriş Yap ve Token'ı Sakla
# Bu isteğin cevabından gelen token, @ece_token değişkenine atanacak.
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "username": "ece",
  "password": "password456"
}
> {%
    client.global.set("ece_token", response.body.token);
%}


### ===================================================
### BÖLÜM: EASY
### ===================================================

### [POST /tweet] => "elif" yeni bir tweet oluşturuyor.
# Bu, EASY bölümünün ilk maddesidir.
# Not: Boş bir veritabanında, bu tweet'in ID'si '1' olacaktır.
POST {{baseUrl}}/tweet
Content-Type: application/json
Authorization: Bearer {{elif_token}}

{
  "content": "Bu Elif'in ilk tweet'i! Herkese merhaba."
}

### [GET /tweet/findByUserId] => "elif" kullanıcısının (ID: 1) tüm tweet'lerini getir.
GET {{baseUrl}}/tweet/findByUserId?userId=1
Authorization: Bearer {{elif_token}}

### [GET /tweet/:id] => ID'si 1 olan tweet'in tüm bilgilerini getir.
GET {{baseUrl}}/tweet/1
Authorization: Bearer {{elif_token}}

### [PUT /tweet/:id] => "elif", kendi tweet'ini (ID: 1) güncelliyor.
PUT {{baseUrl}}/tweet/1
Content-Type: application/json
Authorization: Bearer {{elif_token}}

{
  "content": "Bu Elif'in güncellenmiş tweet içeriği."
}

### [DELETE /tweet/:id] => "elif", kendi tweet'ini (ID: 1) siliyor.
# Bu, "Sadece tweet sahibi ilgili tweeti silebilir" kuralının başarılı senaryosudur.
DELETE {{baseUrl}}/tweet/1
Authorization: Bearer {{elif_token}}

### DOĞRULAMA => ID'si 1 olan tweet'in silindiğini kontrol et.
# Bu isteğin "404 Not Found" hatası vermesi beklenir.
GET {{baseUrl}}/tweet/1
Authorization: Bearer {{elif_token}}


### ===================================================
### BÖLÜM: MEDIUM
### ===================================================
# Bu bölüm için yeni bir tweet oluşturalım.
# Not: Önceki tweet silindiği için, bu yeni tweet'in ID'si '2' olacaktır.

### HAZIRLIK => "elif" yeni bir test tweet'i atıyor.
POST {{baseUrl}}/tweet
Content-Type: application/json
Authorization: Bearer {{elif_token}}

{
  "content": "Bu tweet, yorum, beğeni ve retweet testleri için."
}

### [POST /comment/:id] => "ece", "elif"in tweet'ine (ID: 2) yorum yapıyor.
# Not: Bu yeni yorumun ID'si '1' olacaktır.
POST {{baseUrl}}/comment/2
Content-Type: application/json
Authorization: Bearer {{ece_token}}

{
  "content": "Ece'den harika bir yorum!"
}

### [PUT /comment/:id] => "ece", kendi yorumunu (ID: 1) güncelliyor.
PUT {{baseUrl}}/comment/1
Content-Type: application/json
Authorization: Bearer {{ece_token}}

{
  "content": "Ece yorumunu güncelledi."
}

### [DELETE /comment/:id] => "elif" (tweet sahibi), "ece"nin yorumunu (ID: 1) siliyor.
# Bu, "Sadece tweet sahibi veya yorum sahibi ilgili yorumu silebilmelidir"
# kuralının "tweet sahibi" senaryosunu test eder.
DELETE {{baseUrl}}/comment/1
Authorization: Bearer {{elif_token}}


### [POST /like/:id] => "ece", "elif"in tweet'ini (ID: 2) beğeniyor.
POST {{baseUrl}}/like/2
Authorization: Bearer {{ece_token}}

### [DELETE /like/:id] (Projedeki /dislike) => "ece", beğenisini geri alıyor.
# Proje isterlerinde /dislike POST olarak belirtilmiş olsa da,
# RESTful standartlarına daha uygun olan DELETE metodu kullanılmıştır.
DELETE {{baseUrl}}/like/2
Authorization: Bearer {{ece_token}}


### ===================================================
### BÖLÜM: HARD
### ===================================================

### [POST /retweet/:id] => "ece", "elif"in tweet'ini (ID: 2) retweetliyor.
# Not: Bu yeni retweet'in ID'si '1' olacaktır.
POST {{baseUrl}}/retweet/2
Authorization: Bearer {{ece_token}}

### [DELETE /retweet/:id] => "ece", kendi retweet'ini (ID: 1) siliyor.
DELETE {{baseUrl}}/retweet/1
Authorization: Bearer {{ece_token}}

